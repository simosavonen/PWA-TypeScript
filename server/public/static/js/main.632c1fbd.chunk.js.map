{"version":3,"sources":["components/Navigation.tsx","components/WeatherToday.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Navigation","react_default","a","createElement","className","WeatherToday","props","console","log","data","App","_useState","useState","_useState2","Object","slicedToArray","setData","useEffect","fetch","then","response","json","catch","forecast","Fragment","components_Navigation","components_WeatherToday","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","href","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"wKAYeA,EAVc,WAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,oBCMSC,EAPM,SAACC,GAEpB,OADAC,QAAQC,IAAIF,EAAMG,MAEhBR,EAAAC,EAAAC,cAAA,aCsCWO,SAvCO,WAAM,IAAAC,EAEFC,mBAAS,IAFPC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEnBF,EAFmBI,EAAA,GAEbG,EAFaH,EAAA,GAuB1B,OAnBAI,oBAAU,WAECC,MAAK,cACTC,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBC,MAAM,WACL,OAAO,OAKVH,KAAK,SAACI,GACLP,EAAQO,MAEX,IAKDtB,EAAAC,EAAAC,cAACF,EAAAC,EAAMsB,SAAP,KACEvB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAACsB,EAAD,OAEFxB,EAAAC,EAAAC,cAAA,QAAMC,UAAU,+BACdH,EAAAC,EAAAC,cAACuB,EAAD,CAAcjB,KAAMA,KAEtBR,EAAAC,EAAAC,cAAA,WAASC,UAAU,+BAAnB,gBAEFH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAAlB,aC5BAuB,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTf,KAAK,SAAAoB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BtC,QAAQC,IACN,iHAKE2B,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlBhC,QAAQC,IAAI,sCAGR2B,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BjB,MAAM,SAAA0B,GACLzC,QAAQyC,MAAM,4CAA6CA,KClGjEC,IAASC,OAAOjD,EAAAC,EAAAC,cAACgD,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACnBC,GACD1B,OAAOC,SAAS0B,MAEJC,SAAW5B,OAAOC,SAAS2B,OAIvC,OAGF5B,OAAO6B,iBAAiB,OAAQ,WAC9B,IAAMxB,EAAK,GAAAyB,OAAMJ,GAAN,sBAEP5B,GAgEV,SAAiCO,EAAeC,GAE9CjB,MAAMgB,GACHf,KAAK,SAAAC,GAEJ,IAAMwC,EAAcxC,EAASyC,QAAQC,IAAI,gBAEnB,MAApB1C,EAAS2C,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C5B,UAAUC,cAAc4B,MAAM9C,KAAK,SAAAoB,GACjCA,EAAa2B,aAAa/C,KAAK,WAC7BU,OAAOC,SAASqC,aAKpBlC,EAAgBC,EAAOC,KAG1Bb,MAAM,WACLf,QAAQC,IACN,mEArFA4D,CAAwBlC,EAAOC,GAI/BC,UAAUC,cAAc4B,MAAM9C,KAAK,WACjCZ,QAAQC,IACN,gHAMJyB,EAAgBC,EAAOC,MC/C/BE","file":"static/js/main.632c1fbd.chunk.js","sourcesContent":["import React from 'react'\n\nconst Navigation: React.FC = () => {\n  return (\n    <div className='navbar is-spaced'>\n      <div className='navbar-brand'>\n        PWA-TypeScript\n      </div>\n    </div>\n  )\n}\n\nexport default Navigation\n","import React from 'react'\ntype Props = {\n  data: string\n}\nconst WeatherToday = (props: Props) => {\n  console.log(props.data)\n  return (\n    <div></div>\n  )\n}\n\nexport default WeatherToday","import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation'\nimport WeatherToday from './components/WeatherToday'\nimport 'bulma/css/bulma.css'\n\n\nconst App: React.FC = () => {\n  //const [coords, setCoords] = useState('60.4508322,22.2637141')\n  const [data, setData] = useState('')\n\n  useEffect(() => {\n    const getForecastFromNetwork = () => {\n      return fetch(`/forecast/`)\n        .then((response) => {\n          return response.json();\n        })\n        .catch(() => {\n          return null;\n        })\n    }\n\n    getForecastFromNetwork()\n      .then((forecast) => {\n        setData(forecast)\n      })\n  }, [])\n\n\n\n  return (\n    <React.Fragment>\n      <header className='hero is-info is-bold is-large'>\n        <nav className='hero-header'>\n          <Navigation />\n        </nav>\n        <main className='hero-body has-text-centered'>\n          <WeatherToday data={data} />\n        </main>\n        <section className='hero-foot has-text-centered'>hero footer</section>\n      </header>\n      <footer className='footer has-text-centered'>footer</footer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}