{"version":3,"sources":["climacons/Sun.svg","climacons/Moon.svg","climacons/Cloud-Rain.svg","climacons/Cloud-Snow.svg","climacons/Cloud-Hail.svg","climacons/Wind.svg","climacons/Cloud-Fog.svg","climacons/Cloud.svg","climacons/Cloud-Sun.svg","climacons/Cloud-Moon.svg","components/Navigation.tsx","components/WeatherToday.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","__webpack_require__","p","Navigation","react_default","a","createElement","className","WeatherToday","_ref","data","getWeatherIcon","icon","sun","moon","cloudRain","cloudSnow","cloudHail","wind","fog","cloud","cloudSun","cloudMoon","console","log","style","fontSize","src","currently","alt","width","transform","title","summary","temperature","daily","slice","map","d","key","time","padding","timestamp","Date","getDay","temperatureHigh","App","_useState","useState","_useState2","Object","slicedToArray","setData","useEffect","weatherString","localStorage","getItem","weatherData","JSON","parse","fetch","then","response","json","catch","forecast","setItem","stringify","Fragment","components_Navigation","components_WeatherToday","href","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,iDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,wDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,kDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,mDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,uDCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,0LCYzBC,EAVc,WAC3B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,oBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAf,uLCqHSC,EA3F6B,SAAAC,GAAc,IAAXC,EAAWD,EAAXC,KAQvCC,EAAiB,SAACC,GACtB,OAAQA,GACN,IAAK,YACH,OAAOC,IACT,IAAK,cACH,OAAOC,IACT,IAAK,OACH,OAAOC,IACT,IAAK,OACH,OAAOC,IACT,IAAK,QACH,OAAOC,IACT,IAAK,OACH,OAAOC,IACT,IAAK,MACH,OAAOC,IACT,IAAK,SACH,OAAOC,IACT,IAAK,oBACH,OAAOC,IACT,IAAK,sBACH,OAAOC,IACT,QACE,MAAO,KAIb,OAAKZ,GAGLa,QAAQC,IAAId,GAEVN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,eAChBH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCAAgCkB,MAAO,CAAEC,SAAU,QAAhE,mBAEFtB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gCAEbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAChBH,EAAAC,EAAAC,cAAA,OACEqB,IAAKhB,EAAeD,EAAKkB,UAAUhB,MACnCiB,IAAKnB,EAAKkB,UAAUhB,KACpBa,MAAO,CAAEK,MAAO,OAAQC,UAAW,kBACnCC,MAAOtB,EAAKkB,UAAUK,YAI5B7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAakB,MAAO,CAAEC,SAAU,SAC5ChB,EAAKkB,UAAUM,aAElB9B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAAakB,MAAO,CAAEC,SAAU,SAA/C,UAGFtB,EAAAC,EAAAC,cAAA,UAAQC,UAAU,qBACfG,EAAKyB,MAAMzB,KAAK0B,MAAM,EAAG,GAAGC,IAAI,SAAAC,GAAC,OAChClC,EAAAC,EAAAC,cAAA,OAAKiC,IAAKD,EAAEE,KAAMjC,UAAU,gCAC1BH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBkB,MAAO,CAAEC,SAAU,MAAOe,QAAS,SAjElEC,EAkEQJ,EAAEE,KAjEX,CAAC,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,OAAQ,QACrD,IAAIG,KAAiB,IAAZD,GACDE,YAiETxC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,uBAAuBkB,MAAO,CAAEC,SAAU,QACrDY,EAAEO,gBADL,aAEAzC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,SAChBH,EAAAC,EAAAC,cAAA,OACEqB,IAAKhB,EAAe2B,EAAE1B,MACtBiB,IAAKS,EAAE1B,KACPa,MAAO,CAAEK,MAAO,QAChBE,MAAOM,EAAEL,aA3ER,IAACS,QAkCVtC,EAAAC,EAAAC,cAAA,0BCIGwC,SA1DO,WAAM,IAAAC,EAEFC,qBAFEC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEnBrC,EAFmBuC,EAAA,GAEbG,EAFaH,EAAA,GAoC1B,OAhCAI,oBAAU,WACR,IAAMC,EAAgBC,aAAaC,QAAQ,eAC3C,GAAIF,EAAe,CACjB,IAAMG,EAAcC,KAAKC,MAAML,GAC/BF,EAAQK,KAET,IAEHJ,oBAAU,WAMCO,MAJL,cAKCC,KAAK,SAACC,GACL,OAAOA,EAASC,SAEjBC,MAAM,WACL,OAAO,OAKVH,KAAK,SAACI,GACLV,aAAaW,QAAQ,cAAeR,KAAKS,UAAUF,IACnDb,EAAQa,MAEX,IAKD7D,EAAAC,EAAAC,cAACF,EAAAC,EAAM+D,SAAP,KACEhE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,iCAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAC+D,EAAD,OAEFjE,EAAAC,EAAAC,cAAA,QAAMC,UAAU,+BACdH,EAAAC,EAAAC,cAACgE,EAAD,CAAc5D,KAAMA,KAEtBN,EAAAC,EAAAC,cAAA,WAASC,UAAU,+BAAnB,gBAEFH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,4BAChBH,EAAAC,EAAAC,cAAA,uDADF,kBAEiBF,EAAAC,EAAAC,cAAA,KAAGiE,KAAK,qEAAR,2BAFjB,yEAIEnE,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,KAAGiE,KAAK,kCAAR,2BAAH,+BAC0BnE,EAAAC,EAAAC,cAAA,KAAGiE,KAAK,uCAAR,uBCrD5BC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA8CN,SAASC,EAAgBC,EAAeC,GACtCC,UAAUC,cACPC,SAASJ,GACTlB,KAAK,SAAAuB,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BnE,QAAQC,IACN,iHAKEwD,GAAUA,EAAOW,UACnBX,EAAOW,SAASP,KAMlB7D,QAAQC,IAAI,sCAGRwD,GAAUA,EAAOY,WACnBZ,EAAOY,UAAUR,UAO5BpB,MAAM,SAAA6B,GACLtE,QAAQsE,MAAM,4CAA6CA,KClGjEC,IAASC,OAAO3F,EAAAC,EAAAC,cAAC0F,EAAD,MAASC,SAASC,eAAe,SDqB1C,SAAkBlB,GACvB,GAA6C,kBAAmBC,UAAW,CAMzE,GAJkB,IAAIkB,IACnBC,GACD1B,OAAOC,SAASJ,MAEJ8B,SAAW3B,OAAOC,SAAS0B,OAIvC,OAGF3B,OAAO4B,iBAAiB,OAAQ,WAC9B,IAAMvB,EAAK,GAAAwB,OAAMH,GAAN,sBAEP5B,GAgEV,SAAiCO,EAAeC,GAE9CpB,MAAMmB,GACHlB,KAAK,SAAAC,GAEJ,IAAM0C,EAAc1C,EAAS2C,QAAQC,IAAI,gBAEnB,MAApB5C,EAAS6C,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5C3B,UAAUC,cAAc2B,MAAMhD,KAAK,SAAAuB,GACjCA,EAAa0B,aAAajD,KAAK,WAC7Ba,OAAOC,SAASoC,aAKpBjC,EAAgBC,EAAOC,KAG1BhB,MAAM,WACLzC,QAAQC,IACN,mEArFAwF,CAAwBjC,EAAOC,GAI/BC,UAAUC,cAAc2B,MAAMhD,KAAK,WACjCtC,QAAQC,IACN,gHAMJsD,EAAgBC,EAAOC,MC/C/BE","file":"static/js/main.1cbf4639.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/Sun.53f709c5.svg\";","module.exports = __webpack_public_path__ + \"static/media/Moon.b87ca8b6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud-Rain.316ec331.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud-Snow.20379c89.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud-Hail.f4e14d44.svg\";","module.exports = __webpack_public_path__ + \"static/media/Wind.6b4d1006.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud-Fog.3694ef67.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud.79b3c647.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud-Sun.534afba6.svg\";","module.exports = __webpack_public_path__ + \"static/media/Cloud-Moon.675a7cdd.svg\";","import React from 'react'\n\nconst Navigation: React.FC = () => {\n  return (\n    <div className='navbar is-spaced'>\n      <div className='navbar-brand'>\n        PWA-TypeScript\n      </div>\n    </div>\n  )\n}\n\nexport default Navigation\n","import React from 'react'\n\nimport sun from '../climacons/Sun.svg'\nimport moon from '../climacons/Moon.svg'\nimport cloudRain from '../climacons/Cloud-Rain.svg'\nimport cloudSnow from '../climacons/Cloud-Snow.svg'\nimport cloudHail from '../climacons/Cloud-Hail.svg'\nimport wind from '../climacons/Wind.svg'\nimport fog from '../climacons/Cloud-Fog.svg'\nimport cloud from '../climacons/Cloud.svg'\nimport cloudSun from '../climacons/Cloud-Sun.svg'\nimport cloudMoon from '../climacons/Cloud-Moon.svg'\n\ntype WeatherData = {\n  data: {\n    currently: {\n      temperature: number\n      icon: string\n      summary: string\n    }\n    daily: {\n      data: [{\n        time: number\n        icon: string\n        temperatureHigh: number\n        summary: string\n      }]\n    }\n  }\n}\n\nconst WeatherToday: React.FC<WeatherData> = ({ data }) => {\n\n  const getWeekDay = (timestamp: number) => {\n    const weekdays = ['Sun.', 'Mon.', 'Tue.', 'Wed.', 'Thu.', 'Fri.', 'Sat.']\n    const date = new Date(timestamp * 1000)\n    return weekdays[date.getDay()]\n  }\n\n  const getWeatherIcon = (icon: string) => {\n    switch (icon) {\n      case 'clear-day':\n        return sun\n      case 'clear-night':\n        return moon\n      case 'rain':\n        return cloudRain\n      case 'snow':\n        return cloudSnow\n      case 'sleet':\n        return cloudHail\n      case 'wind':\n        return wind\n      case 'fog':\n        return fog\n      case 'cloudy':\n        return cloud\n      case 'partly-cloudy-day':\n        return cloudSun\n      case 'partly-cloudy-night':\n        return cloudMoon\n      default:\n        return ''\n    }\n  }\n\n  if (!data) {\n    return (<div>Loading...</div>)\n  }\n  console.log(data)\n  return (\n    <div className='columns is-centered'>\n      <div className='card column is-two-thirds'>\n        <header className='card-header'>\n          <p className='card-header-title is-centered' style={{ fontSize: '5vw' }}>Turku, Finland</p>\n        </header>\n        <div className='card-content level is-mobile'>\n\n          <div className='level-item'>\n            <figure className='image'>\n              <img\n                src={getWeatherIcon(data.currently.icon)}\n                alt={data.currently.icon}\n                style={{ width: '15vw', transform: 'scale(1.6,1.6)' }}\n                title={data.currently.summary}\n              />\n            </figure>\n          </div>\n          <div className='level-item' style={{ fontSize: '10vw' }}>\n            {data.currently.temperature}\n          </div>\n          <div className='level-item' style={{ fontSize: '10vw' }}>&deg;C</div>\n\n        </div>\n        <footer className='card-footer level'>\n          {data.daily.data.slice(1, 6).map(d =>\n            <div key={d.time} className='level-item has-text-centered'>\n              <div>\n                <h3 className='title has-text-black' style={{ fontSize: '2vw', padding: '2vw' }}>\n                  {getWeekDay(d.time)}\n                </h3>\n                <h2 className='title has-text-black' style={{ fontSize: '3vw' }}>\n                  {d.temperatureHigh}&nbsp;&deg;C</h2>\n                <figure className='image'>\n                  <img\n                    src={getWeatherIcon(d.icon)}\n                    alt={d.icon}\n                    style={{ width: '10vw' }}\n                    title={d.summary}\n                  />\n                </figure>\n              </div>\n            </div>\n          )}\n        </footer>\n      </div>\n    </div>\n\n\n  )\n}\n\nexport default WeatherToday","import React, { useState, useEffect } from 'react';\nimport Navigation from './components/Navigation'\nimport WeatherToday from './components/WeatherToday'\nimport 'bulma/css/bulma.css'\n\ntype WeatherData = {\n  data: {\n    currently: {\n      temperature: number\n    }\n  }\n}\n\nconst App: React.FC = () => {\n  //const [coords, setCoords] = useState('60.4508322,22.2637141')\n  const [data, setData] = useState()\n\n  useEffect(() => {\n    const weatherString = localStorage.getItem('weatherData')\n    if (weatherString) {\n      const weatherData = JSON.parse(weatherString)\n      setData(weatherData)\n    }\n  }, [])\n\n  useEffect(() => {\n    const url = process.env.NODE_ENV === 'production'\n      ? '/forecast/'\n      : 'http://localhost:3001/forecast'\n\n    const getForecastFromNetwork = () => {\n      return fetch(url)\n        .then((response) => {\n          return response.json();\n        })\n        .catch(() => {\n          return null;\n        })\n    }\n\n    getForecastFromNetwork()\n      .then((forecast) => {\n        localStorage.setItem('weatherData', JSON.stringify(forecast))\n        setData(forecast)\n      })\n  }, [])\n\n\n\n  return (\n    <React.Fragment>\n      <header className='hero is-info is-bold is-large'>\n        <nav className='hero-header'>\n          <Navigation />\n        </nav>\n        <main className='hero-body has-text-centered'>\n          <WeatherToday data={data} />\n        </main>\n        <section className='hero-foot has-text-centered'>hero footer</section>\n      </header>\n      <footer className='footer has-text-centered'>\n        <p>PWA TypeScript demo app - by Simo Savonen.</p>\n        Replicates the <a href='https://codelabs.developers.google.com/codelabs/your-first-pwapp/'>Google Codelabs example</a> but\n        uses React for the front-end, and TypeScript instead of plain JS.\n        <p><a href='https://darksky.net/poweredby/'>Powered by Dark Sky API</a>,\n        weather icons designed by <a href='http://adamwhitcroft.com/climacons/'>@adamwhitcroft</a></p>\n      </footer>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}